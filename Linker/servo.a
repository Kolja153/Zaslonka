;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Evaluation
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 27.10.2015
;Author  : Freeware, for evaluation and non-commercial use only
;Company :
;Comments:
;
;
;Chip type               : ATtiny13
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 16
;
;PORTB.0 - up
;PORTB.1 - down
;PORTB.2 - Led
;PORTB.3  - Motor pot    ADC2
;PORTB.4  - Reguljstor   pot   ADC3
;
;*****************************************************/
;
;#include <tiny13.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;
;#include <delay.h>
;
;#define ADC_VREF_TYPE 0x40
;
;#define min 20
;#define max 1000
;
;#define led   PORTB.2
;
;#define up   PORTB.0
;#define down  PORTB.1
;
;#define motor   2
;#define reguljator 3
;
;
;void GoUp()
; 0000 0031 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0032     up=1;
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 0033     down=0;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0034     led=0;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0035 
; 0000 0036 }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;
;void GoDown()
; 0000 0039 {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 003A     up=0;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 003B     down=1;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 003C      led=0;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 003D 
; 0000 003E }
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;
;void Stop()
; 0000 0041 {
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0042     up=0;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0043     down=0;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0044     led=1;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0045 
; 0000 0046 }
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;
;
;
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 004D {
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 004E ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 004F // Delay needed for the stabilization of the ADC input voltage
; 0000 0050 delay_us(10);
;PCODE: $0000002D VOL: 0
; 0000 0051 // Start the AD conversion
; 0000 0052 ADCSRA|=0x40;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0053 // Wait for the AD conversion to complete
; 0000 0054 while ((ADCSRA & 0x10)==0);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0055 ADCSRA|=0x10;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0056 return ADCW;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0057 }
;PCODE: $0000003B VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 005C {
;PCODE: $0000003C VOL: 0
; 0000 005D // Declare your local variables here
; 0000 005E 
; 0000 005F // Crystal Oscillator division factor: 1
; 0000 0060 #pragma optsize-
; 0000 0061 CLKPR=0x80;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0062 CLKPR=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0063 #ifdef _OPTIMIZE_SIZE_
; 0000 0064 #pragma optsize+
; 0000 0065 #endif
; 0000 0066 
; 0000 0067 // Input/Output Ports initialization
; 0000 0068 // Port B initialization
; 0000 0069 // Func5=In Func4=In Func3=In Func2=Out Func1=Out Func0=Out
; 0000 006A // State5=T State4=T State3=T State2=1 State1=0 State0=0
; 0000 006B PORTB=0x04;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 006C DDRB=0x07;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 006D 
; 0000 006E // Timer/Counter 0 initialization
; 0000 006F // Clock source: System Clock
; 0000 0070 // Clock value: Timer 0 Stopped
; 0000 0071 // Mode: Normal top=0xFF
; 0000 0072 // OC0A output: Disconnected
; 0000 0073 // OC0B output: Disconnected
; 0000 0074 TCCR0A=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0075 TCCR0B=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0076 TCNT0=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0077 OCR0A=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0078 OCR0B=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0079 
; 0000 007A // External Interrupt(s) initialization
; 0000 007B // INT0: Off
; 0000 007C // Interrupt on any change on pins PCINT0-5: Off
; 0000 007D GIMSK=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 007E MCUCR=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 007F 
; 0000 0080 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0081 TIMSK0=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0082 
; 0000 0083 // Analog Comparator initialization
; 0000 0084 // Analog Comparator: Off
; 0000 0085 ACSR=0x80;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0086 ADCSRB=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0087 DIDR0=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0088 
; 0000 0089 // ADC initialization
; 0000 008A // ADC Clock frequency: 1000,000 kHz
; 0000 008B // ADC Bandgap Voltage Reference: Off
; 0000 008C // ADC Auto Trigger Source: ADC Stopped
; 0000 008D // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
; 0000 008E DIDR0&=0x03;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 008F DIDR0|=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0090 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0091 ADCSRA=0x83;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0092 
; 0000 0093 
; 0000 0094 while (1)
;PCODE: $00000065 VOL: 0
; 0000 0095       {
; 0000 0096 
; 0000 0097            if (read_adc(motor)<read_adc(reguljator) )
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0098                 {
; 0000 0099                     GoUp();
;PCODE: $00000070 VOL: 0
; 0000 009A 
; 0000 009B                 }
; 0000 009C 
; 0000 009D 
; 0000 009E               if (read_adc(motor)>read_adc(reguljator) )
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 009F                 {
; 0000 00A0                     GoDown();
;PCODE: $0000007C VOL: 0
; 0000 00A1 
; 0000 00A2                 }
; 0000 00A3 
; 0000 00A4 
; 0000 00A5 
; 0000 00A6               if (read_adc(motor)==read_adc(reguljator) )
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00A7                 {
; 0000 00A8                      Stop();
;PCODE: $00000088 VOL: 0
; 0000 00A9 
; 0000 00AA                 }
; 0000 00AB 
; 0000 00AC 
; 0000 00AD       }
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00AE }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
